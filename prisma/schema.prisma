// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  first_name String
  last_name  String
  avatar     String
  email      String @unique

  business Business?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type Location {
  address      String
  country      String
  country_code String
  city         String
  longitude    Float
  latitude     Float
  region       String
}

model Business {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String
  logo       String
  phone      String
  location   Location
  country    String
  city       String
  state      String
  zip_code   String
  is_deleted Boolean?  @default(false)
  deletedAt  DateTime?

  user_id    String              @unique @db.ObjectId
  user       Users               @relation(fields: [user_id], references: [id])
  products   Products[]
  payment    Payment[]
  categories ProductCategories[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Customer  Customer[]
}

type Bank {
  bank_name      String
  account_name   String
  account_number String
  swift_code     String
  iban           String
  currency       String
  country        String
  state          String
  city           String
  address        String
  zip_code       String
}

type MoMo {
  provider       String
  account_number String
  account_name   String
}

model Payment {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  payment_type String
  bank         Bank?
  momo         MoMo?
  business_id  String    @unique @db.ObjectId
  business     Business? @relation(fields: [business_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Products {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  unique_id   String    @unique() @default(uuid())
  name        String
  description String
  images      String[]
  is_deleted  Boolean   @default(false)
  deletedAt   DateTime?
  cost_price  Float

  business_id String   @db.ObjectId
  business    Business @relation(fields: [business_id], references: [id])

  category_id String            @db.ObjectId
  category    ProductCategories @relation(fields: [category_id], references: [id])

  orders OrderProduct[]

  variations ProductVariations[] // One-to-many relationship with ProductVariation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductCategories {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  unique_id   String @unique() @default(uuid())
  name        String
  description String

  business_id String   @db.ObjectId
  business    Business @relation(fields: [business_id], references: [id])

  products Products[] // One-to-many relationship

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariations {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  unique_id  String @unique() @default(uuid())
  // sku        String?
  price      Float
  quantity   Int
  attributes Json

  product_id String   @db.ObjectId
  product    Products @relation(fields: [product_id], references: [id])

  orders OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  SHIPPING
  DELIVERED
  CANCELLED
}

model ProductOrders {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  unique_id String @unique() @default(uuid())

  customer_id String   @db.ObjectId
  customer    Customer @relation(fields: [customer_id], references: [id])

  business_id String

  location   Location
  payment_id String?       @unique
  payment    OrderPayment? @relation(fields: [payment_id], references: [id])

  orderStatus OrderStatus    @default(PENDING)
  amount      Float
  products    OrderProduct[] // One-to-many relationship with OrderProducts

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  quantity Int
  amount   Float

  product_id String   @db.ObjectId
  product    Products @relation(fields: [product_id], references: [id])

  product_variation_id String            @db.ObjectId
  product_variation    ProductVariations @relation(fields: [product_variation_id], references: [id])

  order_id String        @db.ObjectId
  order    ProductOrders @relation(fields: [order_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderPayment {
  id           String @id @default(uuid()) @map("_id")
  provider     String // Payment provider, e.g., Stripe, PayPal
  checkout_url String // URL for the checkout process
  status       String // Payment status, e.g., pending, completed, failed - obtained from payment provideer

  order_id String?        @unique // Ensures a one-to-one relationship
  order    ProductOrders? @relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // unique_id String @unique() @default(uuid())

  name     String
  email    String
  phone    String          @unique()
  location Location
  orders   ProductOrders[]

  business_id String   @db.ObjectId
  business    Business @relation(fields: [business_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
